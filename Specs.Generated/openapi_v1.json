{
  "openapi": "3.0.1",
  "info": {
    "title": "Bank API",
    "description": "The Bank API is a design reference project suitable to bootstrap development for a compliant and modern API.",
    "termsOfService": "https://en.wikipedia.org/wiki/Terms_of_service#Content",
    "contact": {
      "url": "https://www.guanchen.nl"
    },
    "license": {
      "name": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License",
      "url": "https://creativecommons.org/licenses/by-nc-sa/4.0"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "http://localhost:5201/v1"
    }
  ],
  "paths": {
    "/banks": {
      "get": {
        "tags": [
          "Supervisory"
        ],
        "summary": "Get all banks",
        "description": "Get all banks in the Netherlands.",
        "operationId": "GetAllBanks",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "The page of the result.",
            "required": true,
            "schema": {
              "maximum": 2000000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The pagesize of the result.",
            "required": true,
            "schema": {
              "maximum": 1200,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 21
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "The ordering query expression can be built with a comma-delimited ordered list of field/property names, followed by `asc` or `desc` keywords. \n\nBy default, if you don't add these keywords, the API assumes you need Ascending ordering.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "The following filter operators are supported:\n\n### Conditional Operators\n\n| Name                  | Operator | Usage example        |\n|-----------------------|----------|----------------------|\n| Equal                 | `=`      | `FieldName = Value`  |\n| NotEqual              | `!=`     | `FieldName !=Value`  |\n| LessThan              | `<`      | `FieldName < Value`  |\n| GreaterThan           | `>`      | `FieldName > Value`  |\n| GreaterThanOrEqual    | `>=`     | `FieldName >=Value`  |\n| LessThanOrEqual       | `<=`     | `FieldName <=Value`  |\n| Contains - Like       | `=*`     | `FieldName =*Value`  |\n| NotContains - NotLike | `!*`     | `FieldName !*Value`  |\n| StartsWith            | `^`      | `FieldName ^ Value`  |\n| NotStartsWith         | `!^`     | `FieldName !^ Value` |\n| EndsWith              | `$`      | `FieldName $ Value`  |\n| NotEndsWith           | `!$`     | `FieldName !$ Value` |\n\n> Tip: If you don't specify any value after `=` or `!=` operators, the API searches for the `default` and `null` values.\n\n### Logical Operators\n\n| Name        | Operator | Usage example                                   |\n|-------------|----------|-------------------------------------------------|\n| AND         | `,`      | `FirstName = Value, LastName = Value2`          |\n| OR          | `\\|`     | `FirstName=Value\\|LastName=Value2`              |\n| Parenthesis | `()`     | `(FirstName=*Jo,Age<30)\\|(FirstName!=Hn,Age>30)`|\n\n### Case Insensitive Operator\n\nThe `/i` operator can be use after string values for case insensitive searches. You should only use this operator after the search value. \n\nExample:\n```\nFirstName=John/i\n```\n\nthis query matches with `JOHN`, `john`, `John`, `jOHn`, etc.\n    ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfBankModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Supervisory"
        ],
        "summary": "Create a bank",
        "description": "Create a bank in the Netherlands.",
        "operationId": "CreateBank",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/banks/{id}": {
      "get": {
        "tags": [
          "Supervisory"
        ],
        "summary": "Get a bank",
        "description": "Get a bank in the Netherlands.",
        "operationId": "GetBank",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the bank.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Supervisory"
        ],
        "summary": "Update a bank",
        "description": "Update a bank in the Netherlands.",
        "operationId": "UpdateBank",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the bank.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Supervisory"
        ],
        "summary": "Delete a bank",
        "description": "Delete a bank in the Netherlands.",
        "operationId": "DeleteBank",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the bank.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teller": {
      "get": {
        "tags": [
          "Administrative"
        ],
        "summary": "Get bank teller",
        "description": "Get the teller of all banks.",
        "operationId": "GetBankTeller",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Teller"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teller/reports": {
      "get": {
        "tags": [
          "Administrative"
        ],
        "summary": "Get bank teller reports",
        "description": "Get the teller reports.",
        "operationId": "GetBankTellerReports",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TellerReport"
                  },
                  "example": [
                    {
                      "name": "secretz.txt"
                    },
                    {
                      "name": "secretz2.txt"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BankModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the bank.",
            "format": "int32",
            "default": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the bank.",
            "default": "Guanchen",
            "nullable": true
          },
          "isCompliant": {
            "type": "boolean",
            "description": "Compliancy status of the bank.",
            "default": true
          },
          "bankTier": {
            "$ref": "#/components/schemas/BankTier"
          }
        },
        "example": {
          "id": 123,
          "name": "Guanchen",
          "isCompliant": true,
          "bankTier": "A"
        }
      },
      "BankTier": {
        "enum": [
          "A",
          "B",
          "C"
        ],
        "description": "Tier of the bank.",
        "default": "A"
      },
      "PagingOfBankModel": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankModel"
            }
          }
        },
        "example": {
          "count": 2,
          "data": [
            {
              "id": 1,
              "name": "Foo",
              "isCompliant": true,
              "bankTier": "A"
            },
            {
              "id": 2,
              "name": "Bar",
              "isCompliant": false,
              "bankTier": "B"
            }
          ]
        }
      },
      "Teller": {
        "type": "object",
        "properties": {
          "gitHubProfile": {
            "type": "string",
            "description": "GitHub profile of the teller.",
            "format": "uri",
            "nullable": true
          }
        },
        "example": {
          "gitHubProfile": "https://github.com/rbhanda"
        }
      },
      "TellerReport": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the report.",
            "nullable": true
          }
        },
        "example": {
          "name": "secretz.txt"
        }
      }
    },
    "securitySchemes": {
      "ApiKey-Header": {
        "type": "apiKey",
        "description": "https://learn.openapis.org/specification/security.html#api-keys",
        "name": "Ocp-Apim-Subscription-Key",
        "in": "header"
      },
      "ApiKey-Query": {
        "type": "apiKey",
        "description": "https://learn.openapis.org/specification/security.html#api-keys",
        "name": "subscription-key",
        "in": "query"
      },
      "Bearer": {
        "type": "http",
        "description": "https://learn.openapis.org/specification/security.html#http-authentication",
        "scheme": "bearer",
        "bearerFormat": "Json Web Token"
      },
      "OpenIdConnect": {
        "type": "openIdConnect",
        "description": "https://learn.openapis.org/specification/security.html#openid-connect",
        "openIdConnectUrl": "https://login.microsoftonline.com/b81eb003-1c5c-45fd-848f-90d9d3f8d016/v2.0/.well-known/openid-configuration"
      }
    }
  },
  "security": [
    {
      "ApiKey-Header": [ ]
    },
    {
      "ApiKey-Query": [ ]
    },
    {
      "Bearer": [ ]
    },
    {
      "OpenIdConnect": [ ]
    }
  ],
  "tags": [
    {
      "name": "Supervisory"
    },
    {
      "name": "Administrative"
    }
  ]
}